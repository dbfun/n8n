#
# docker-compose.yml:
# * https://github.com/n8n-io/n8n-hosting/tree/main/docker-compose/withPostgres
# * https://github.com/n8n-io/self-hosted-ai-starter-kit/blob/main/docker-compose.yml
# конфиги: https://docs.n8n.io/hosting/configuration/environment-variables/
#

services:

  n8n:
    build:
      context: .
      dockerfile: ./docker/n8n/Dockerfile
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
      - N8N_PORT=80
      - WEBHOOK_URL
      - N8N_EDITOR_BASE_URL
      - GENERIC_TIMEZONE=Europe/Moscow
      - N8N_HIDE_USAGE_PAGE=true
      - N8N_METRICS=true
      # Только для локальной разработки для обхода проблемы:
      # Your n8n server is configured to use a secure cookie,
      # however you are either visiting this via an insecure URL, or using Safari
      - N8N_SECURE_COOKIE=false
#      - N8N_LOG_LEVEL=debug
#      - N8N_LOG_LEVEL=info
#      - N8N_LOG_LEVEL=warn
#      - N8N_LOG_LEVEL=error
#      - N8N_LOG_LEVEL=silent
    hostname: n8n
    links:
      - postgres
    volumes:
      - ${DATA_PATH}/n8n:/home/node/.n8n
      # для сохранения файлов в локальный каталог (для отладки)
      - ./shared-files:/home/node/shared-files
      # резервные копии
      - ./backups:/home/node/backups
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.deb24.localhost`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=80"

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ollama_storage:/root/.ollama
    networks:
      - backend

  init-ollama:
    image: ollama/ollama:latest
    container_name: ollama-pull-llama
    volumes:
      - ollama_storage:/root/.ollama
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 3; export OLLAMA_HOST=ollama:11434; ollama pull mxbai-embed-large; ollama pull llama3.1:8b"
    networks:
      - backend

  # Ключевые фичи: https://docs.openwebui.com/features/
  # Настройки через env: https://docs.openwebui.com/getting-started/env-configuration
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    hostname: open-webui
    restart: unless-stopped
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - VECTOR_DB=qdrant
      - QDRANT_URI=http://qdrant:6333
      - RAG_EMBEDDING_ENGINE=ollama
      - RAG_OLLAMA_BASE_URL=http://ollama:11434
#      - RAG_EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2 # default value
#      - PDF_EXTRACT_IMAGES=true # default value
#      - RAG_FILE_MAX_SIZE=100
#      - ENABLE_IMAGE_GENERATION=false # default value
      - DOCLING_SERVER_URL=http://docling:5001
    networks:
      - frontend
      - backend
    volumes:
      - ${DATA_PATH}/open-webui:/app/backend/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.open-webui.rule=Host(`open-webui.deb24.localhost`)"
      - "traefik.http.services.open-webui.loadbalancer.server.port=8080"

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    restart: unless-stopped
    volumes:
      - ${DATA_PATH}/qdrant:/qdrant/storage
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.deb24.localhost`)"

  # Local only
  neo4j:
    image: neo4j:latest
    hostname: neo4j
    restart: unless-stopped
    ports:
      - '7474:7474' # HTTP-протокол
      - '7687:7687' # Bolt-протокол
    environment:
      - NEO4J_AUTH
#      - NEO4J_AUTH=none
    volumes:
      - ${DATA_PATH}/neo4j/data:/data

  # Local only
  # Требует установки community node: n8n-nodes-browserless
  # https://github.com/browserless/browserless
  browserless:
    image: ghcr.io/browserless/chromium
    hostname: browserless
    restart: unless-stopped
    environment:
      - MAX_CONCURRENT_SESSIONS=10
      - CONNECTION_TIMEOUT=120000
      - TOKEN=${BROWSERLESS_TOKEN}
    networks:
      - backend

  # Настройки https://docs.nocodb.com/getting-started/self-hosted/environment-variables/
  nocodb:
    image: nocodb/nocodb:latest
    environment:
      - NC_DB
      - NC_ADMIN_EMAIL
      - NC_ADMIN_PASSWORD
      - NC_DISABLE_TELE=true
      - NC_INVITE_ONLY_SIGNUP=true
      # Против роста таблицы nc_audit_v2
      - NC_DISABLE_AUDIT=true
    restart: unless-stopped
    volumes:
      - ${DATA_PATH}/nocodb:/usr/app/data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nocodb.rule=Host(`nocodb.deb24.localhost`)"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"

  # Local only
  # Авторизация: https://docs.stirlingpdf.com/Advanced%20Configuration/System%20and%20Security/
  # Языки для OCR https://docs.stirlingpdf.com/Advanced%20Configuration/OCR
  # Настройка https://hub.docker.com/r/stirlingtools/stirling-pdf
#  stirling-pdf:
#    image: docker.stirlingpdf.com/stirlingtools/stirling-pdf:latest-fat
#    hostname: stirling-pdf
#    volumes:
#      - ./tessdata:/usr/share/tessdata
#      - ./pipeline:/pipeline/
#    networks:
#      - frontend
#      - backend
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.stirling-pdf.rule=Host(`stirling-pdf.deb24.localhost`)"

  # Local only
  docling:
    image: quay.io/docling-project/docling-serve
    hostname: docling
    restart: unless-stopped
    environment:
      - DOCLING_SERVE_ENABLE_UI=true
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docling.rule=Host(`docling.deb24.localhost`)"

  startup:
    build:
      context: .
      dockerfile: ./docker/startup/Dockerfile
    # смена владельца каталогов, так как n8n запускается от непривилегированного пользователя
    command: >
      sh -c "
        chown startup:startup /home/node/.n8n /home/node/shared-files /home/node/backups
      "
    volumes:
      - ${DATA_PATH}/n8n:/home/node/.n8n
      - ./shared-files:/home/node/shared-files
      - ./backups:/home/node/backups
    networks:
      - backend

  postgres:
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    hostname: postgres
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    volumes:
      - ${DATA_PATH}/postgresql:/var/lib/postgresql/data
    restart: unless-stopped
#    command: sleep infinity
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - ${PG_PORT}:5432
    networks:
      - backend

  redis:
    image: redis:alpine
    hostname: redis
    restart: unless-stopped
    volumes:
      - ${DATA_PATH}/redis:/data
    networks:
      - backend

volumes:
  ollama_storage:

networks:
  frontend:
    driver: bridge
    external: true
  backend:
    driver: bridge